Starting on 10-2 at 15:05:24

Question q2
===========

maxDepth 2
*** PASS: test_cases/q2/0-eval-function-lose-states-1.test
maxDepth 2
*** FAIL: test_cases/q2/0-eval-function-lose-states-2.test
***     Incorrect move for depth=2
***         Student move: Left
***         Optimal move: Right
***     Tree:
***             root
***            /    \
***         lose1   lose2
***           0       1
***     
***     If your algorithm is returning a different
***     action, make sure you are calling the
***     evaluation function on losing states.
maxDepth 2
*** PASS: test_cases/q2/0-eval-function-win-states-1.test
maxDepth 2
*** FAIL: test_cases/q2/0-eval-function-win-states-2.test
***     Incorrect move for depth=2
***         Student move: Left
***         Optimal move: Right
***     Tree:
***             root
***            /    \
***         win1    win2
***           0      1
***     
***     If your algorithm is returning a different
***     action, make sure you are calling the
***     evaluation function on winning states.
maxDepth 2
*** FAIL: Exception raised: getScore() called on non-terminal state or before maximum depth achieved.
*** 
*** Traceback (most recent call last):
***   File "/Users/patrick/repos/multiagent/grading.py", line 80, in grade
***     util.TimeoutFunction(getattr(gradingModule, q), 1800)(
***   File "/Users/patrick/repos/multiagent/util.py", line 675, in __call__
***     result = self.function(*args, **keyArgs)
***   File "/Users/patrick/repos/multiagent/autograder.py", line 308, in <lambda>
***     return lambda grades: question.execute(grades)
***   File "/Users/patrick/repos/multiagent/testClasses.py", line 57, in execute
***     if not f(grades):
***   File "/Users/patrick/repos/multiagent/autograder.py", line 303, in <lambda>
***     return lambda grades: testCase.execute(grades, moduleDict, solutionDict)
***   File "multiagentTestClasses.py", line 434, in execute
***     action, generated = self.solveProblem(multiAgents)
***   File "multiagentTestClasses.py", line 421, in solveProblem
***     action = studentAgent.getAction(self.problem.startState)
***   File "multiAgents.py", line 161, in getAction
***     _, move = max_value(gameState, 0)
***   File "multiAgents.py", line 136, in max_value
***     v2: int = min_value(gameState, currDepth)
***   File "multiAgents.py", line 153, in min_value
***     v2, _ = max_value(succ, currDepth)
***   File "multiAgents.py", line 131, in max_value
***     return utility(gameState), None
***   File "multiAgents.py", line 116, in utility
***     return gameState.getScore()
***   File "multiagentTestClasses.py", line 64, in getScore
***     raise Exception(
*** Exception: getScore() called on non-terminal state or before maximum depth achieved.
*** 

### Question q2: 0/5 ###


Finished at 15:05:24

Provisional grades
==================
Question q2: 0/5
------------------
Total: 0/5

Your grades are NOT yet registered.  To register your grades, make sure
to follow your instructor's guidelines to receive credit on your project.

